[FUNCTION function] [VOID void] [IDENTIFIER countTo] [L_PAREN (] [INTEGER int] 
[IDENTIFIER n] [R_PAREN )] [L_BRACE {] [FOR for] [L_PAREN (] 
[INTEGER int] [IDENTIFIER i] [ASSIGN =] [INT_LITERAL 0] [SEMICOLON ;] 
[IDENTIFIER i] [LESS <] [IDENTIFIER n] [SEMICOLON ;] [IDENTIFIER i] 
[INCREMENT ++] [R_PAREN )] [L_BRACE {] [PRINT print] [L_PAREN (] 
[STRING_LITERAL i equals] [PLUS +] [IDENTIFIER i] [R_PAREN )] [SEMICOLON ;] 
[R_BRACE }] [FLOAT float] [IDENTIFIER rand] [ASSIGN =] [FLOAT_LITERAL 0.5] 
[SEMICOLON ;] [WHILE while] [L_PAREN (] [IDENTIFIER rand] [EQUAL ==] 
[FLOAT_LITERAL 0.5] [R_PAREN )] [L_BRACE {] [IDENTIFIER rand] [MINUS -] 
[ASSIGN =] [INT_LITERAL 5] [SEMICOLON ;] [BREAK break] [SEMICOLON ;] 
[R_BRACE }] [RETURN return] [IDENTIFIER p] [SEMICOLON ;] [R_BRACE }] 
[FUNCTION function] [INTEGER int] [IDENTIFIER main] [L_PAREN (] [R_PAREN )] 
[L_BRACE {] [FLOAT float] [IDENTIFIER count] [ASSIGN =] [IDENTIFIER countTo] 
[L_PAREN (] [INT_LITERAL 10] [R_PAREN )] [SEMICOLON ;] [STRING string] 
[IDENTIFIER s] [ASSIGN =] [STRING_LITERAL ] [SEMICOLON ;] [IF if] 
[L_PAREN (] [IDENTIFIER count] [GREAT_EQUAL >=] [INT_LITERAL 8] [R_PAREN )] 
[L_BRACE {] [IDENTIFIER s] [ASSIGN =] [STRING_LITERAL bigger or equal to 8] [SEMICOLON ;] 
[R_BRACE }] [ELSE else] [L_BRACE {] [IDENTIFIER s] [ASSIGN =] 
[STRING_LITERAL correct answer] [SEMICOLON ;] [R_BRACE }] [RETURN return] [INT_LITERAL 0] 
[SEMICOLON ;] [R_BRACE }] [EOF ] 